{"version":3,"sources":["App.js","index.js"],"names":["onVolume","a","audioCtx","window","AudioContext","webkitAudioContext","meter","volumemeter","fftSize","tweenIn","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","connect","onended","stop","bind","console","log","warn","App","useState","volume","setVolume","barVolume","setBarVolume","maxVolume","setMaxVolume","timerRef","useRef","intervalRef","volumeRef","barVolRef","volumeMultiplier","URLSearchParams","location","search","get","useEffect","getMic","vol","current","clearTimeout","clearInterval","setTimeout","setInterval","fullDist","distTop","delta","onKeyDown","e","key","document","addEventListener","removeEventListener","className","style","color","Math","floor","backgroundColor","borderRadius","minWidth","round","height","marginTop","width","bottom","position","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.512ab7ec.chunk.js","sourcesContent":["import \"./App.css\";\nimport { useEffect, useState, useRef } from \"react\";\n\nimport volumemeter from \"volume-meter\";\n\nfunction App() {\n  const [volume, setVolume] = useState(0);\n  const [barVolume, setBarVolume] = useState(0);\n  const [maxVolume, setMaxVolume] = useState(0);\n\n  const timerRef = useRef();\n  const intervalRef = useRef();\n  const volumeRef = useRef(0);\n  const barVolRef = useRef(0);\n\n  const queryParams = new URLSearchParams(window.location.search);\n  const volumeMultiplier = queryParams.get(\"v\") || 1;\n\n  useEffect(() => {\n    getMic((vol) => {\n      setVolume(volumeMultiplier * vol);\n    });\n  }, [volumeMultiplier]);\n\n  useEffect(() => {\n    function startBarTimer() {\n      timerRef.current = setTimeout(() => {\n        intervalRef.current = setInterval(() => {\n          const fullDist = barVolume - volumeRef.current;\n          var distTop = barVolume - barVolRef.current;\n          if (distTop < 0.1) distTop = 0.1;\n          const tm = 4;\n          const delta =\n            -(1 / (tm * fullDist)) * distTop ** 2 + (1 / tm) * distTop;\n          console.log(delta);\n          if (barVolRef.current - volumeRef.current < 0.2) {\n            setBarVolume(volumeRef.current);\n            if (timerRef.current) clearTimeout(timerRef.current);\n            if (intervalRef.current) clearInterval(intervalRef.current);\n          } else {\n            setBarVolume(barVolRef.current - delta);\n          }\n        }, 5);\n      }, 2500);\n    }\n\n    volumeRef.current = volume;\n    barVolRef.current = barVolume;\n    if (volume > barVolume) {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n      setBarVolume(volume);\n      barVolRef.current = volume;\n      startBarTimer();\n    }\n  }, [volume, barVolume]);\n\n  useEffect(() => {\n    if (volume > maxVolume) {\n      setMaxVolume(volume);\n    }\n  }, [maxVolume, volume]);\n\n  useEffect(() => {\n    function onKeyDown(e) {\n      console.log(e);\n      if (e.key === \"r\") setMaxVolume(0);\n    }\n\n    document.addEventListener(\"keydown\", onKeyDown);\n\n    return () => document.removeEventListener(\"keydown\", onKeyDown);\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <p\n        className=\"CenterText\"\n        style={{\n          color: `rgb(${Math.floor((maxVolume / 100) * 255)}, ${Math.floor(\n            255 - (maxVolume / 100) * 255\n          )}, 0)`,\n          backgroundColor: `rgba(${Math.floor(\n            (maxVolume / 100) * 50\n          )}, ${Math.floor(50 - (maxVolume / 100) * 50)}, 0, 0.5)`,\n          borderRadius: \"8px\",\n          minWidth: \"2em\",\n        }}\n      >\n        {Math.round(maxVolume)}\n      </p>\n      <div className=\"Inner\">\n        <div\n          style={{\n            height: `${volume}%`,\n            marginTop: \"auto\",\n            width: \"100%\",\n            backgroundColor: `rgb(${Math.floor(\n              (volume / 100) * 255\n            )}, ${Math.floor(255 - (volume / 100) * 255)}, 0)`,\n          }}\n        ></div>\n        <div\n          style={{\n            height: \"2px\",\n            bottom: `${barVolume}%`,\n            width: \"100%\",\n            position: \"relative\",\n            backgroundColor: `rgb(${Math.floor(\n              (barVolume / 100) * 255\n            )}, ${Math.floor(255 - (barVolume / 100) * 255)}, 0)`,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n}\n\nasync function getMic(onVolume) {\n  try {\n    var audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    var meter = volumemeter(audioCtx, { fftSize: 2048, tweenIn: 10 }, onVolume);\n    let stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n    var src = audioCtx.createMediaStreamSource(stream);\n    src.connect(meter);\n    stream.onended = meter.stop.bind(meter);\n    console.log(\"mic inited\");\n  } catch (err) {\n    console.warn(err);\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}